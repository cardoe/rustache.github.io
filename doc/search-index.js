var searchIndex = {};
searchIndex['rustache'] = {"items":[[0,"","rustache","The main crate for the Rustache library."],[1,"HashBuilder","","`HashBuilder` is a helper type that constructs `Data` types in a HashMap"],[1,"VecBuilder","","`VecBuilder` is a helper type that constructs `Data` types in a Vector"],[3,"render_file_from_hb","","Render a template file from a HashBuilder to a specified writer"],[3,"render_file_from_json_enum","","Render a template file from a Rust JSON Enum to a specified writer"],[3,"render_file_from_json_string","","Render a template file from a JSON string to a specified writer"],[3,"render_file_from_json_file","","Render a template file from a JSON file to a specified writer"],[3,"render_text_from_hb","","Render template text from a HashBuilder to a specified writer"],[3,"render_text_from_json_enum","","Render template text from a Rust JSON Enum to a specified writer"],[3,"render_text_from_json_string","","Render template text from a JSON string to a specified writer"],[3,"render_text_from_json_file","","Render template text from a JSON file to a specified writer"],[10,"fmt","","",0],[10,"new","","Create a new `HashBuilder` instance",0],[10,"insert_string","","Add a `String` to the `HashBuilder`",0],[10,"insert_bool","","Add a `Boolean` to the `HashBuilder`",0],[10,"insert_int","","Add an `Integer` to the `HashBuilder`",0],[10,"insert_float","","Add a `Float` to the `HashBuilder`",0],[10,"insert_vector","","Add a `Vector` to the `HashBuilder`",0],[10,"insert_hash","","Add a `Hash` to the `HashBuilder`\n \n```ignore\nuse rustache::HashBuilder;\nlet data = HashBuilder::new()\n    .insert_hash(\"hero1\", |builder| {\n        builder\n            .insert_string(\"first_name\", \"Anduin\")\n            .insert_string(\"last_name\", \"Wrynn\")\n    })\n    .insert_hash(\"hero2\", |builder| {\n        builder\n            .insert_string(\"first_name\", \"Jaina\")\n            .insert_string(\"last_name\", \"Proudmoore\")    \n    });\n```",0],[10,"insert_lambda","","Add a `Lambda` that accepts a String and returns a String to the `HashBuilder`",0],[10,"set_partials_path","","Set a path to partials data",0],[10,"new","","Create a new `VecBuilder` instance",1],[10,"push_string","","Add a `String` to the `VecBuilder`",1],[10,"push_bool","","Add a `Bool` to the `VecBuilder`",1],[10,"push_int","","Add an `Integer` to the `VecBuilder`",1],[10,"push_float","","Add a `Float` to the `VecBuilder`",1],[10,"push_vector","","Add a `Vector` to the `VecBuilder`",1],[10,"push_hash","","Add a `Hash` to the `VecBuilder`",1],[10,"push_lambda","","Add a `Lambda` to the `VecBuilder`",1]],"paths":[[1,"HashBuilder"],[1,"VecBuilder"]]};
searchIndex['memstream'] = {"items":[[0,"","memstream","A reader + writer stream backed by an in-memory buffer."],[1,"MemStream","","`MemStream` is a reader + writer stream backed by an in-memory buffer"],[10,"new","","Creates a new `MemStream` which can be read and written to",0],[10,"eof","","Tests whether this stream has read all bytes in its ring buffer\nIf `true`, then this will no longer return bytes from `read`",0],[10,"as_slice","","Acquires an immutable reference to the underlying buffer of\nthis `MemStream`",0],[10,"unwrap","","Unwraps this `MemStream`, returning the underlying buffer",0],[10,"read","","",0],[10,"write","","",0]],"paths":[[1,"MemStream"]]};

initSearch(searchIndex);
